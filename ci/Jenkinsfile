pipeline {
  agent {
    kubernetes {
      yamlFile 'ci/kubernetes.yaml'
    }
  }

  options {
    timeout(time: 20, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {
    stage('Build Rust') {
      steps {
        container('rust') {
          dir('cef/Release') {
            downloadCEF versionFile: '../../CEF_VERSION.txt', files: ['Release/libcef.lib']
          }

          sh 'rustup target add x86_64-pc-windows-gnu'
          dir('native') {
            sh 'cargo clean'
            sh 'cargo build --release --target x86_64-pc-windows-gnu'

            sh 'cargo tree --prefix none --locked --frozen --no-dedupe | sort -u | grep -v \'(\' | sed \'s|\\(.*\\) v\\([0-9]*\\.[0-9]*\\.[0-9]*\\)|crate/cratesio/-/\\1/\\2|g\' > rust.deps'
            stash name: 'rust_dependencies', includes: 'rust.deps', useDefaultExcludes: false
          }

          dir('native/target/x86_64-pc-windows-gnu/release') {
            sh 'mkdir -p signed'
            sh 'curl --output signed/chromium_subp.exe --form file=@chromium_subp.exe --silent --show-error --fail https://cbi.eclipse.org/authenticode/sign'
            sh 'curl --output signed/chromium_jni.dll --form file=@chromium_jni.dll --silent --show-error --fail https://cbi.eclipse.org/authenticode/sign'
            dir('signed') {
              stash name: 'rust_binaries', includes: 'chromium_subp.exe, chromium_jni.dll', useDefaultExcludes: false
            }
          }
        }
      }
    }

    stage('Build Java') {
      steps {
        container('maven') {
          dir('java/org.eclipse.set.browser.lib/res') {
            unstash 'rust_binaries'
          }

          dir('java') {
            mvn goal: 'clean verify -P sign', dependencies: 'dependencies/maven.deps'
          }
        }
      }
    }

    stage('Process Licenses') {
      steps {
        container('maven') {
          collectDependencies()
        }
      }
    }

    stage('Remove Old Snapshot') {
      when {
        branch 'main'
      }

      steps {
        removeOldSnapshot repo: 'browser'
      }
    }

    stage('Deploy Snapshot') {
      when {
        anyOf {
          buildingTag()
          branch 'main'
          branch pattern: 'release/[0-9.]+', comparator: 'REGEXP'          
          branch pattern: 'feature/\\w+', comparator: 'REGEXP'
        }
      }

      steps {
        deployP2Site name: "browser/${BRANCH_NAME}", path: 'java/org.eclipse.set.browser.releng.repository/target/repository'
      }
    }
  }

  post {
    always {
      // Publish JUnit test result
      junit testResults: 'java/*/target/surefire-reports/*.xml', allowEmptyResults: true
      recordIssues aggregatingResults: true,
        enabledForFailure: true,
        tools: [
          checkStyle(),
          mavenConsole()],
        qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
    }
  }
}
